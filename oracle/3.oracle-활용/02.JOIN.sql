CREATE TABLE ACADEMY_A (
	STUDENT_NO NUMBER PRIMARY KEY,
	STUDENT_NAME VARCHAR2(20) NOT NULL
);

INSERT INTO ACADEMY_A VALUES(1001,'정소화');
INSERT INTO ACADEMY_A VALUES(1002,'김용욱');
INSERT INTO ACADEMY_A VALUES(1003,'고명석');
INSERT INTO ACADEMY_A VALUES(1004,'김연아');

--SELECT *  T1,T2는 별칭, 두테이블간 칼럼값들이 일치할 경우 사용
--FROM TABLE1 T1, TABLE2 T2
--WHERE T1.KEY = T2.KEY;

CREATE TABLE ACADEMY_B (
	STUDENT_NO NUMBER PRIMARY KEY,
	STUDENT_NAME VARCHAR2(20) NOT NULL
);

INSERT INTO ACADEMY_B VALUES(1003,'고명석');
INSERT INTO ACADEMY_B VALUES(1004,'김연아');
INSERT INTO ACADEMY_B VALUES(1005,'김태환');
INSERT INTO ACADEMY_B VALUES(1006,'이윤아');

SELECT * FROM ACADEMY_A;
SELECT * FROM ACADEMY_B;

-- 예제3-1. A학원과 B학원 테이블 EQUI 조인하여 조회하기
SELECT *
FROM ACADEMY_A T1, ACADEMY_B T2
WHERE T1.STUDENT_NO = T2.STUDENT_NO;

--NON-EQUI JOIN
--EQUAL(=)조건이 아닌 다른 조건(BETWEEN, >, >=, <, <=) 으로 조인 하는 방식

-- 예제3-1. A학원과 B학원 테이블 NON-EQUI 조인하여 조회하기
SELECT *
FROM ACADEMY_A T1, ACADEMY_B T2
WHERE T1.STUDENT_NO >= T2.STUDENT_NO;


--NATURAL JOIN(INNER JOIN중 하나)
--왼쪽, 오른쪽 테이블에서 같은 이름을 가진 컬럼들이 모두 동일한 데이터를 가지고 있을 경우만 출력

SELECT *
FROM ACADEMY_A T1
NATURAL JOIN ACADEMY_B T2;

--OUTER JOIN
--두 테이블에서 모든 레코드를 조회한다 
--LEFT JOIN과 RIGHT조인의 합집합 

SELECT *
FROM ACADEMY_A T1
FULL OUTER JOIN ACADEMY_B T2
ON (T1.STUDENT_NO = T2.STUDENT_NO)
ORDER BY T1.STUDENT_NO;  -- 가독성 정렬

--LEFT JOIN(OUTER JOIN중 하나)
--왼쪽테이블의 모든 레코드를 B테이블과 결합한다

SELECT *
FROM ACADEMY_A T1
LEFT JOIN ACADEMY_B T2
ON (T1.STUDENT_NO = T2.STUDENT_NO)
ORDER BY T1.STUDENT_NO;

--RIGHT JOIN(OUTER JOIN중 하나)
--오른쪽테이블의 모든 레코드를 왼쪽테이블과 결합한다

SELECT *
FROM ACADEMY_A T1
RIGHT JOIN ACADEMY_B T2
ON (T1.STUDENT_NO = T2.STUDENT_NO)
ORDER BY T1.STUDENT_NO;

-- 퀴즈

CREATE TABLE DEPT (
    DEPT_NO      NUMBER PRIMARY KEY,
    DEPT_NAME    VARCHAR2(20) NOT NULL
);
CREATE TABLE EMP (
    EMP_NO      NUMBER PRIMARY KEY,
    EMP_NAME    VARCHAR2(20) NOT NULL,
    DEPT_NO NUMBER NOT NULL,
    CONSTRAINT FK_DEPT_NO FOREIGN KEY(DEPT_NO) REFERENCES DEPT (DEPT_NO)
);
INSERT INTO DEPT VALUES (1, '인사부');
INSERT INTO DEPT VALUES (2, '연구부');
INSERT INTO DEPT VALUES (3, '홍보부');
INSERT INTO EMP VALUES (1001, '정소화', 3);
INSERT INTO EMP VALUES (1002, '김용욱', 1);
INSERT INTO EMP VALUES (1003, '고명석', 2);

SELECT *
FROM DEPT T1, EMP T2
WHERE T1.DEPT_NO = T2.DEPT_NO;

SELECT T1.DEPT_NAME, T2.EMP_NAME
FROM DEPT T1
JOIN EMP T2
ON (T1.DEPT_NO = T2.DEPT_NO);

SELECT T1.STUDENT_NAME, T2.STUDENT_NO
FROM STUDENT T1
JOIN CLASS_STUDENT T2
ON (T1.STUDENT_NO = T2.STUDENT_NO);

SELECT *
FROM CLASS_STUDENT T1, STUDENT T2, CLASS T3
WHERE T1.STUDENT_NO = T2.STUDENT_NO 
AND T1.CLASS_NO = T3.CLASS_NO;

--EQUI 조인
SELECT T1.STUDENT_NO, T2.STUDENT_NAME, T3.CLASS_NAME
FROM CLASS_STUDENT T1, STUDENT T2, CLASS T3
WHERE T1.STUDENT_NO = T2.STUDENT_NO 
AND T1.CLASS_NO = T3.CLASS_NO;

--INNER 조인
SELECT T1.STUDENT_NO, T2.STUDENT_NAME, T3.CLASS_NAME
FROM CLASS_STUDENT T1
JOIN STUDENT T2 ON (T1.STUDENT_NO = T2.STUDENT_NO)
JOIN CLASS T3 ON (T1.CLASS_NO = T3.CLASS_NO);